sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of September, 1998.
Copyright (c) 1994-1998 by Todd M. Austin.  All Rights Reserved.


Processor Parameters:
Issue Width: 4
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 74.4581
Branch Predictor Power Consumption: 4.76412  (6.58%)
 branch target buffer power (W): 4.40936
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.432165  (0.596%)
 Instruction Decode Power (W): 0.0159915
 RAT decode_power (W): 0.125864
 RAT wordline_power (W): 0.0307815
 RAT bitline_power (W): 0.246771
 DCL Comparators (W): 0.0127569
Instruction Window Power Consumption: 2.20432  (3.04%)
 tagdrive (W): 0.0943488
 tagmatch (W): 0.033695
 Selection Logic (W): 0.0134217
 decode_power (W): 0.0532503
 wordline_power (W): 0.0844643
 bitline_power (W): 1.92514
Load/Store Queue Power Consumption: 0.96318  (1.33%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 3.58482  (4.95%)
 decode_power (W): 0.125864
 wordline_power (W): 0.0844643
 bitline_power (W): 3.37449
Result Bus Power Consumption: 2.29754  (3.17%)
Total Clock Power: 26.0975  (36%)
Int ALU Power: 4.66013  (6.43%)
FP ALU Power: 14.281  (19.7%)
Instruction Cache Power Consumption: 2.54423  (3.51%)
 decode_power (W): 0.724888
 wordline_power (W): 0.057312
 bitline_power (W): 1.14691
 senseamp_power (W): 0.192
 tagarray_power (W): 0.423116
Itlb_power (W): 0.269848 (0.372%)
Data Cache Power Consumption: 5.18303  (7.15%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.928409 (1.28%)
Level 2 Cache Power Consumption: 4.2478 (5.86%)
 decode_power (W): 0.448295
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.540011
sim: command line: sim-outorder sha input_small.asc 

sim: simulation started @ Tue Mar 11 14:16:28 2003, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn               13202945 # total number of instructions committed
sim_num_refs                2503179 # total number of loads and stores committed
sim_num_loads               1926422 # total number of loads committed
sim_num_stores          576757.0000 # total number of stores committed
sim_num_branches             835745 # total number of branches committed
sim_elapsed_time                 44 # total simulation time in seconds
sim_inst_rate           300066.9318 # simulation speed (in insts/sec)
sim_total_insn             13494668 # total number of instructions executed
sim_total_refs              2582640 # total number of loads and stores executed
sim_total_loads             1976167 # total number of loads executed
sim_total_stores        606473.0000 # total number of stores executed
sim_total_branches           841278 # total number of branches executed
sim_cycle                   4663626 # total simulation time in cycles
sim_IPC                      2.8310 # instructions per cycle
sim_CPI                      0.3532 # cycles per instruction
sim_exec_BW                  2.8936 # total instructions (mis-spec + committed) per cycle
sim_IPB                     15.7978 # instruction per branch
IFQ_count                  17572145 # cumulative IFQ occupancy
IFQ_fcount                  4219692 # cumulative IFQ full count
ifq_occupancy                3.7679 # avg IFQ occupancy (insn's)
ifq_rate                     2.8936 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.3022 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9048 # fraction of time (cycle's) IFQ was full
RUU_count                  69100537 # cumulative RUU occupancy
RUU_fcount                  3589971 # cumulative RUU full count
ruu_occupancy               14.8169 # avg RUU occupancy (insn's)
ruu_rate                     2.8936 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.1206 # avg RUU occupant latency (cycle's)
ruu_full                     0.7698 # fraction of time (cycle's) RUU was full
LSQ_count                  14005902 # cumulative LSQ occupancy
LSQ_fcount                   485597 # cumulative LSQ full count
lsq_occupancy                3.0032 # avg LSQ occupancy (insn's)
lsq_rate                     2.8936 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.0379 # avg LSQ occupant latency (cycle's)
lsq_full                     0.1041 # fraction of time (cycle's) LSQ was full
bpred_bimod.lookups          856104 # total number of bpred lookups
bpred_bimod.updates          835745 # total number of updates
bpred_bimod.addr_hits        800744 # total number of address-predicted hits
bpred_bimod.dir_hits         800985 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses            34760 # total number of misses
bpred_bimod.jr_hits            5571 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen            5591 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP           49 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP           55 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9581 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9584 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9964 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.8909 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes         5706 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops         5539 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP         5536 # total number of RAS predictions used
bpred_bimod.ras_hits.PP         5522 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9975 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               13624081 # total number of accesses
il1.hits                   13622430 # total number of hits
il1.misses                     1651 # total number of misses
il1.replacements               1181 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0001 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                2508250 # total number of accesses
dl1.hits                    2504144 # total number of hits
dl1.misses                     4106 # total number of misses
dl1.replacements               3594 # total number of replacements
dl1.writebacks                 1900 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0016 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0014 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0008 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                   7657 # total number of accesses
ul2.hits                       6723 # total number of hits
ul2.misses                      934 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.1220 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              13624081 # total number of accesses
itlb.hits                  13624068 # total number of hits
itlb.misses                      13 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses               2508309 # total number of accesses
dtlb.hits                   2508296 # total number of hits
dtlb.misses                      13 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           2015454.1211 # total power usage of rename unit
bpred_power            22218083.8446 # total power usage of bpred unit
window_power           10280121.3535 # total power usage of instruction window
lsq_power              4491911.2320 # total power usage of load/store queue
regfile_power          16718268.3941 # total power usage of arch. regfile
icache_power           13123805.3871 # total power usage of icache
dcache_power           28501463.8423 # total power usage of dcache
dcache2_power          19810139.4559 # total power usage of dcache2
alu_power              88334558.0720 # total power usage of alu
falu_power             66601452.5137 # total power usage of falu
resultbus_power        10714880.7432 # total power usage of resultbus
clock_power            121708851.8637 # total power usage of clock
avg_rename_power             0.4322 # avg power usage of rename unit
avg_bpred_power              4.7641 # avg power usage of bpred unit
avg_window_power             2.2043 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            3.5848 # avg power usage of arch. regfile
avg_icache_power             2.8141 # avg power usage of icache
avg_dcache_power             6.1114 # avg power usage of dcache
avg_dcache2_power            4.2478 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          2.2975 # avg power usage of resultbus
avg_clock_power             26.0975 # avg power usage of clock
fetch_stage_power      35341889.2317 # total power usage of fetch stage
dispatch_stage_power   2015454.1211 # total power usage of dispatch stage
issue_stage_power      162133074.6988 # total power usage of issue stage
avg_fetch_power              7.5782 # average power of fetch unit per cycle
avg_dispatch_power           0.4322 # average power of dispatch unit per cycle
avg_issue_power             34.7655 # average power of issue unit per cycle
total_power            337917538.3094 # total power per cycle
avg_total_power_cycle       72.4581 # average total power per cycle
avg_total_power_cycle_nofp_nod2      53.9293 # average total power per cycle
avg_total_power_insn        25.0408 # average total power per insn
avg_total_power_insn_nofp_nod2      18.6374 # average total power per insn
rename_power_cc1       1914556.2169 # total power usage of rename unit_cc1
bpred_power_cc1        3976867.6251 # total power usage of bpred unit_cc1
window_power_cc1       9068708.3327 # total power usage of instruction window_cc1
lsq_power_cc1          1012469.8640 # total power usage of lsq_cc1
regfile_power_cc1      11998461.0225 # total power usage of arch. regfile_cc1
icache_power_cc1       12609113.4111 # total power usage of icache_cc1
dcache_power_cc1       11515692.0387 # total power usage of dcache_cc1
dcache2_power_cc1        24274.0395 # total power usage of dcache2_cc1
alu_power_cc1          20709810.8122 # total power usage of alu_cc1
resultbus_power_cc1    8104534.8447 # total power usage of resultbus_cc1
clock_power_cc1        49525823.6274 # total power usage of clock_cc1
avg_rename_power_cc1         0.4105 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.8527 # avg power usage of bpred unit_cc1
avg_window_power_cc1         1.9446 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.2171 # avg power usage of lsq_cc1
avg_regfile_power_cc1        2.5728 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         2.7037 # avg power usage of icache_cc1
avg_dcache_power_cc1         2.4693 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0052 # avg power usage of dcache2_cc1
avg_alu_power_cc1            4.4407 # avg power usage of alu_cc1
avg_resultbus_power_cc1       1.7378 # avg power usage of resultbus_cc1
avg_clock_power_cc1         10.6196 # avg power usage of clock_cc1
fetch_stage_power_cc1  16585981.0361 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1 1914556.2169 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  50435489.9318 # total power usage of issue stage_cc1
avg_fetch_power_cc1          3.5565 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.4105 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1         10.8147 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  130460311.8347 # total power per cycle_cc1
avg_total_power_cycle_cc1      27.9740 # average total power per cycle_cc1
avg_total_power_insn_cc1       9.6675 # average total power per insn_cc1
rename_power_cc2       1457913.5853 # total power usage of rename unit_cc2
bpred_power_cc2        1990795.6261 # total power usage of bpred unit_cc2
window_power_cc2       8655306.5870 # total power usage of instruction window_cc2
lsq_power_cc2           615604.9098 # total power usage of lsq_cc2
regfile_power_cc2      4494662.1322 # total power usage of arch. regfile_cc2
icache_power_cc2       12609113.4111 # total power usage of icache_cc2
dcache_power_cc2       7664507.9051 # total power usage of dcache_cc2
dcache2_power_cc2        16262.6932 # total power usage of dcache2_cc2
alu_power_cc2          15461060.4432 # total power usage of alu_cc2
resultbus_power_cc2    6580475.8685 # total power usage of resultbus_cc2
clock_power_cc2        36429194.1133 # total power usage of clock_cc2
avg_rename_power_cc2         0.3126 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.4269 # avg power usage of bpred unit_cc2
avg_window_power_cc2         1.8559 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.1320 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.9638 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         2.7037 # avg power usage of icache_cc2
avg_dcache_power_cc2         1.6435 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0035 # avg power usage of dcache2_cc2
avg_alu_power_cc2            3.3152 # avg power usage of alu_cc2
avg_resultbus_power_cc2       1.4110 # avg power usage of resultbus_cc2
avg_clock_power_cc2          7.8113 # avg power usage of clock_cc2
fetch_stage_power_cc2  14599909.0371 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2 1457913.5853 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  38993218.4068 # total power usage of issue stage_cc2
avg_fetch_power_cc2          3.1306 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.3126 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          8.3611 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  95974897.2747 # total power per cycle_cc2
avg_total_power_cycle_cc2      20.5795 # average total power per cycle_cc2
avg_total_power_insn_cc2       7.1121 # average total power per insn_cc2
rename_power_cc3       1468003.3757 # total power usage of rename unit_cc3
bpred_power_cc3        3814935.5904 # total power usage of bpred unit_cc3
window_power_cc3       8685209.4615 # total power usage of instruction window_cc3
lsq_power_cc3           956355.5298 # total power usage of lsq_cc3
regfile_power_cc3      4550804.0273 # total power usage of arch. regfile_cc3
icache_power_cc3       12660582.6087 # total power usage of icache_cc3
dcache_power_cc3       9412305.3889 # total power usage of dcache_cc3
dcache2_power_cc3      1994849.8720 # total power usage of dcache2_cc3
alu_power_cc3          22223535.1675 # total power usage of alu_cc3
resultbus_power_cc3    6630361.4982 # total power usage of resultbus_cc3
clock_power_cc3        43235149.7789 # total power usage of clock_cc3
avg_rename_power_cc3         0.3148 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.8180 # avg power usage of bpred unit_cc3
avg_window_power_cc3         1.8623 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.2051 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.9758 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         2.7148 # avg power usage of icache_cc3
avg_dcache_power_cc3         2.0182 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4277 # avg power usage of dcache2_cc3
avg_alu_power_cc3            4.7653 # avg power usage of alu_cc3
avg_resultbus_power_cc3       1.4217 # avg power usage of resultbus_cc3
avg_clock_power_cc3          9.2707 # avg power usage of clock_cc3
fetch_stage_power_cc3  16475518.1991 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3 1468003.3757 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  49902616.9179 # total power usage of issue stage_cc3
avg_fetch_power_cc3          3.5328 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.3148 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3         10.7004 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  115632092.2988 # total power per cycle_cc3
avg_total_power_cycle_cc3      24.7945 # average total power per cycle_cc3
avg_total_power_insn_cc3       8.5687 # average total power per insn_cc3
total_rename_access        13494058 # total number accesses of rename unit
total_bpred_access           835745 # total number accesses of bpred unit
total_window_access        46595990 # total number accesses of instruction window
total_lsq_access            2508402 # total number accesses of load/store queue
total_regfile_access       20350764 # total number accesses of arch. regfile
total_icache_access        13624715 # total number accesses of icache
total_dcache_access         2508250 # total number accesses of dcache
total_dcache2_access           7657 # total number accesses of dcache2
total_alu_access           13270925 # total number accesses of alu
total_resultbus_access     14367837 # total number accesses of resultbus
avg_rename_access            2.8935 # avg number accesses of rename unit
avg_bpred_access             0.1792 # avg number accesses of bpred unit
avg_window_access            9.9914 # avg number accesses of instruction window
avg_lsq_access               0.5379 # avg number accesses of lsq
avg_regfile_access           4.3637 # avg number accesses of arch. regfile
avg_icache_access            2.9215 # avg number accesses of icache
avg_dcache_access            0.5378 # avg number accesses of dcache
avg_dcache2_access           0.0016 # avg number accesses of dcache2
avg_alu_access               2.8456 # avg number accesses of alu
avg_resultbus_access         3.0808 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  4 # max number accesses of bpred unit
max_window_access                16 # max number accesses of instruction window
max_lsq_access                    4 # max number accesses of load/store queue
max_regfile_access               11 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 4 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    4 # max number accesses of alu
max_resultbus_access              6 # max number accesses of resultbus
max_cycle_power_cc1         44.0671 # maximum cycle power usage of cc1
max_cycle_power_cc2         34.4902 # maximum cycle power usage of cc2
max_cycle_power_cc3         37.4035 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  76352 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                   8192 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   32 # total number of pages allocated
mem.page_mem                   128k # total size of memory pages allocated
mem.ptab_misses                 148 # total first level page table misses
mem.ptab_accesses          33186622 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

